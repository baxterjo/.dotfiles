#!/usr/bin/env bash

set -o errexit

REPO_URL=https://github.com/baxterjo/.dotfiles.git
REPO_PATH="$HOME/.dotfiles"

if [ -n "$REPO_BRANCH" ]
then
  echo "Branch argument supplied: ${1}"
fi

reset_color=$(tput sgr 0)

info() {
  printf "%s[*] %s%s\n" "$(tput setaf 4)" "$1" "$reset_color"
}

success() {
  printf "%s[*] %s%s\n" "$(tput setaf 2)" "$1" "$reset_color"
}

err() {
  printf "%s[*] %s%s\n" "$(tput setaf 1)" "$1" "$reset_color"
}

warn() {
  printf "%s[*] %s%s\n" "$(tput setaf 3)" "$1" "$reset_color"
}

install_xcode() {
  if xcode-select -p >/dev/null; then
    warn "xCode Command Line Tools already installed"
  else
    info "Installing xCode Command Line Tools..."
    xcode-select --install
    sudo xcodebuild -license accept
  fi
}

add_homebrew_to_path() {
  case "${SHELL}" in
    */bash*)
      if [[ -n "${HOMEBREW_ON_LINUX-}" ]]
      then
        shell_rcfile="${HOME}/.bashrc"
      else
        shell_rcfile="${HOME}/.bash_profile"
      fi
      ;;
    */zsh*)
      if [[ -n "${HOMEBREW_ON_LINUX-}" ]]
      then
        shell_rcfile="${ZDOTDIR:-"${HOME}"}/.zshrc"
      else
        shell_rcfile="${ZDOTDIR:-"${HOME}"}/.zprofile"
      fi
      ;;
    */fish*)
      shell_rcfile="${HOME}/.config/fish/config.fish"
      ;;
    *)
      shell_rcfile="${ENV:-"${HOME}/.profile"}"
      ;;
  esac

  
}

install_homebrew() {
  export HOMEBREW_CASK_OPTS="--appdir=/Applications"
  if ! command -v brew &>/dev/null; then
    info "Installing homebrew..."
    sudo --validate # reset `sudo` timeout to use Homebrew install in noninteractive mode
    NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

  else
    warn "Homebrew already installed"
  fi
}

bootstrap_mac() {
  install_xcode
  install_homebrew

  info "Installing Git"
  brew install git
}


bootstrap_linux(){
  sudo apt-get install -y build-essential procps curl file git
  install_homebrew

  test -d ~/.linuxbrew && eval "$(~/.linuxbrew/bin/brew shellenv)"
  test -d /home/linuxbrew/.linuxbrew && eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
  echo "eval \"\$($(brew --prefix)/bin/brew shellenv)\"" >> ~/.bashrc
}

bootstrap(){
  if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    bootstrap_linux
  elif [[ "$OSTYPE" == "darwin"* ]]; then
    bootstrap_mac
  else
    echo "${OSTYPE} not supported."
    exit 1
  fi
}

main(){
  info "########################"
  info "####### dotfiles #######"
  info "########################"
  read -p "Press enter to start:"
  info "Bootstraping..."
  boostrap 
  
  info "Cloning .dotfiles repo from $REPO_URL at $REPO_BRANCH into $REPO_PATH"
  git clone -b "$REPO_BRANCH" "$REPO_URL" "$REPO_PATH"
  
  info "Change path to $REPO_PATH"
  cd "$REPO_PATH" >/dev/null
  
  /bin/bash ./install.sh
}

# If an argument is givent to this script, assume it is a function call.
if [ -n "$1" ]; then
  $1
# Bash equivalent to `if __name__ == "__main__"` in python
elif [ "${BASH_SOURCE[0]}" = "$0" ]; then
  main
fi


